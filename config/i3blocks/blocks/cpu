#!/bin/sh

icon="üêå"
case $BLOCK_BUTTON in
	1) notify-send "üñ• CPU hogs" "$(ps axch -o cmd:15,%cpu --sort=-%cpu | head)" ;;
	3) notify-send "üñ• CPU module " "\- Shows CPU temperature.
- Click to show intensive processes.
- % is of single core." ;;
esac

# Write the current state to a temp file
save_current() {
    grep 'cpu ' /proc/stat > /tmp/cpustat
}

# If the temp file doesn't exist, save it now.
# This means the current reading will be pretty inaccurate,
# usually too high, because it measures CPU usage from now
# until 2 lines later in this program.
[ ! -e /tmp/cpustat ] && save_current

# Load the previous state from the temp file, and capture
# the current output.
previous=$(cat /tmp/cpustat)
current=$(grep 'cpu ' /proc/stat)

# Define the awk script to parse the two lines of input.
# For the first line (NR == 1), save the values.
# For subsequent rows (NR > 1), calculate the difference
# between this line and the first line and calculate the
# total average percentage.
awkscript='NR == 1 {
             owork=($2+$4);
             oidle=$5;
           }
           NR > 1 {
             work=($2+$4)-owork;
             idle=$5-oidle;
             printf "%.1f%", 100 * work / (work+idle)
           }'

# Execute the awk script against the two lines of input
# and save the string.
usage=$(echo -e "$previous\n$current" | awk "$awkscript")

# Save the current value. The next time you run this script
# will calculate average usage since this line was run.
save_current

echo "$icon $usage"

# /proc/stat
# 1		2 user	3 nice	4 system	5 idle		6 iowait	7 irq	8 softirq
# cpu	5358311	3192	995603		31399502	8060		150414	71224 0 0 0


# awk '/cpu /{total=($2+$3+$4+$5+$6+$7);usage=($2+$4)*100/($2+$4+$5)} END {print "‚ò¢Ô∏è " usage "/" total "%"}' /proc/stat
# awk -v a="$(awk '/cpu /{print $2+$4,$2+$4+$5}' /proc/stat; sleep 1)" '/cpu /{split(a,b," "); usage=100*($2+$4-b[1])/($2+$4+$5-b[2])} END {print "‚ò¢Ô∏è " usage "%"}}' /proc/stat
# sensors | awk '/Core 0/ {print "üå°", $3}'

# awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else print ($2+$4-u1) * 100 / (t-t1) "%"; }' \
# <(grep 'cpu ' /proc/stat) <(sleep 1;grep 'cpu ' /proc/stat)

